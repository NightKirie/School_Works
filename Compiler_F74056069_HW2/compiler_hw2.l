/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { return ADD; }
"-" 	{ return SUB; }
"*" 	{ return MUL; }
"/" 	{ return DIV; }
"%"     { return MOD; }
"++"    { return INC; }
"--"    { return DEC; }

 /* Relational */
">"		{ return MT; }
"<"		{ return LT; }
">="	{ return MTE; }
"<="	{ return LTE; }
"=="	{ return EQ; }
"!="	{ return NE; }

 /* Assignment */
"="		{ return ASGN; }
"+="	{ return ADDASGN; }
"-="	{ return SUBASGN; }
"*="	{ return MULASGN; }
"/="	{ return DIVASGN; }
"%="	{ return MODASGN; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }
"!"		{ return NOT; }

 /* Delimiters */
"("		{ return LB; }
")"		{ return RB; }
"{"		{ return LCB; }
"}"		{ return RCB; }
"["		{ return LSB; }
"]"		{ return RSB; }
","		{ return COMMA; }

 /* Print Keywords */	
"print"		{ return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }
"while"		{ return WHILE; }

 /* Declaration Keywords */
"void"		{ return VOID; }
"int"		{ return INT; }
"float"  	{ return FLOAT; }
"string"  	{ return STRING; }
"bool"  	{ return BOOL; }

 /* boolean Keywords */
"true"      { return TRUE; }
"false"     { return FALSE; }

"return"    { return RET; }

 /* String Constant */
\"				        { 
    BEGIN STRING_STATE; 
    return COMMA; }
<STRING_STATE>\"		{ 
    BEGIN INITIAL;
    return COMMA; }
<STRING_STATE>[^"]*		{ 
    strcpy(yylval.string, yytext);
    return STR_CONST; }

 /* Number Constant */
{integer}	{ 
    yylval.i_val = atoi(yytext);
    return I_CONST; }
{float}	    { 
    yylval.f_val = atof(yytext);
    return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{  }
<COMMENT>\n			{ ++yylineno; }
<COMMENT>"*"		{  }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{  }

 /* Variable ID */
 {id}       { return ID; }

 /* others */

[;]         { return SEMICOLON; }
[\n]        { ++yylineno; }
[ \t]		{  } /* Ignore */
[^ \t\n] 	{ ++yylineno; } /* Ignore other charactor sets */
<<EOF>>     { }

%%

int yywrap()
{
    return 1;
}
