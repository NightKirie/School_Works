from pulp import *
import numpy as np
#a handful of sites
sites = ["億載金城", "安平樹屋", "林默娘公園", "安平老街", "安平古堡", "東興洋行", "安平開臺天后宮", "安平遊憩碼頭", "台南公園", "花園夜市"
                , "開元寺", "321巷藝術聚落", "祀典武廟", "台灣文學館", "巴克禮公園"]# "藍曬圖文創園區", "原台南縣知事官邸", "神農街", "台南文創園區", "台南火車站"
               # , "大天后宮", "赤崁樓", "林百貨", "延平郡王祠", "海安路藝術街", "成大榕園", "孔廟"]
all_to_all_distance = [[0, 626, 210, 502, 536, 652, 489, 427, 1261, 991, 1543, 1247, 1048, 1014, 1136, 1068, 973, 977, 857, 944, 1046, 777, 1178, 1288, 1313, 1426, 1282], [549, 0, 459, 166, 110, 159, 199, 341, 1030, 767, 1319, 1015, 873, 904, 954, 886, 922, 852, 790, 763, 1009, 898, 1142, 1047, 1088, 1195, 1564], [177, 509, 0, 385, 419, 535, 372, 310, 1178, 916, 1469, 1163, 964, 995, 1052, 985, 1013, 943, 851, 860, 1100, 771, 1233, 1229, 1229, 1343, 1392], [476, 180, 386, 0, 89, 212, 99, 255, 1082, 819, 1372, 1068, 925, 956, 1014, 946, 974, 904, 842, 821, 1061, 941, 1194, 1099, 1140, 1247, 1616], [504, 98, 414, 69, 0, 113, 40, 202, 1000, 737, 1289, 985, 843, 874, 924, 856, 892, 821, 759, 733, 979, 868, 1111, 1016, 1058, 1165, 1534], [558, 143, 468, 186, 105, 0, 186, 281, 1039, 776, 1328, 1024, 882, 913, 962, 895, 930, 860, 798, 772, 1017, 907, 1150, 1055, 1097, 1204, 1573], [464, 217, 374, 95, 47, 227, 0, 163, 1130, 862, 1414, 1116, 917, 948, 1005, 937, 965, 895, 833, 813, 1052, 932, 1185, 1181, 1182, 1295, 1608], [377, 377, 287, 240, 199, 278, 152, 0, 1109, 841, 1393, 1095, 896, 927, 984, 916, 944, 874, 812, 792, 1031, 823, 1164, 1160, 1161, 1274, 1487], [1293, 1093, 1234, 1137, 1081, 1119, 1175, 1171, 0, 436, 421, 98, 374, 398, 357, 409, 400, 379, 539, 497, 488, 612, 450, 230, 346, 323, 959], [1000, 784, 941, 828, 772, 810, 944, 940, 354, 0, 533, 339, 406, 541, 447, 379, 554, 504, 424, 295, 641, 545, 637, 394, 510, 542, 1120], [1530, 1314, 1471, 1358, 1302, 1340, 1391, 1413, 383, 589, 0, 402, 667, 704, 651, 702, 707, 686, 845, 759, 794, 886, 556, 378, 494, 427, 1009], [1299, 1098, 1239, 1142, 1086, 1124, 1181, 1177, 86, 459, 448, 0, 380, 404, 363, 415, 406, 385, 545, 503, 493, 618, 489, 256, 365, 350, 973], [1048, 903, 988, 942, 892, 930, 929, 925, 351, 578, 708, 375, 0, 238, 94, 93, 264, 201, 281, 245, 351, 331, 350, 363, 373, 528, 859], [1018, 935, 1019, 974, 923, 961, 961, 957, 339, 689, 705, 363, 233, 0, 233, 284, 73, 126, 286, 379, 160, 323, 293, 289, 327, 479, 716], [1120, 979, 1064, 1018, 967, 1005, 1005, 1001, 371, 604, 728, 395, 85, 300, 0, 120, 301, 247, 336, 271, 388, 397, 370, 383, 393, 548, 879], [1072, 930, 1015, 969, 918, 956, 956, 952, 386, 556, 731, 388, 88, 315, 129, 0, 316, 262, 287, 222, 403, 349, 385, 398, 408, 563, 894], [945, 961, 977, 1000, 949, 987, 987, 983, 365, 715, 732, 389, 259, 171, 259, 311, 0, 152, 289, 405, 146, 250, 319, 315, 353, 505, 698], [957, 885, 969, 924, 873, 911, 911, 907, 374, 665, 741, 398, 183, 36, 210, 261, 109, 0, 164, 329, 196, 237, 329, 325, 363, 515, 751], [923, 779, 863, 818, 767, 805, 805, 801, 528, 559, 846, 503, 269, 300, 357, 289, 317, 247, 0, 223, 404, 315, 537, 533, 561, 724, 960], [924, 791, 865, 819, 779, 817, 806, 802, 497, 449, 815, 472, 260, 368, 300, 232, 385, 315, 245, 0, 472, 382, 556, 514, 531, 662, 1028], [1052, 1028, 1062, 1068, 1017, 1055, 1054, 1051, 432, 783, 799, 456, 327, 239, 326, 378, 148, 220, 380, 473, 0, 335, 295, 383, 421, 573, 556], [794, 1014, 855, 1006, 1002, 1040, 993, 930, 665, 763, 939, 596, 368, 327, 450, 383, 325, 290, 316, 451, 411, 0, 619, 616, 653, 806, 747], [1197, 1175, 1259, 1214, 1163, 1201, 1201, 1197, 495, 845, 625, 519, 447, 385, 430, 481, 387, 366, 526, 619, 305, 556, 0, 308, 363, 340, 532], [1261, 1082, 1201, 1156, 1070, 1108, 1143, 1139, 187, 537, 416, 211, 348, 327, 332, 383, 329, 308, 468, 448, 416, 541, 313, 0, 116, 190, 726], [1227, 1058, 1167, 1121, 1047, 1085, 1108, 1105, 286, 644, 537, 310, 314, 293, 298, 349, 295, 274, 434, 425, 382, 507, 280, 121, 0, 311, 693], [1426, 1225, 1366, 1269, 1213, 1251, 1307, 1303, 331, 641, 430, 350, 521, 540, 505, 556, 542, 521, 681, 626, 629, 754, 352, 213, 329, 0, 861], [1294, 1609, 1389, 1568, 1597, 1635, 1555, 1492, 909, 1259, 1005, 933, 861, 827, 844, 896, 701, 791, 944, 1067, 594, 776, 555, 722, 777, 903, 0]]

#non symetric distances
distances = dict( ((sites[a],sites[b]),all_to_all_distance[a][b]) for a in range(0, len(sites)) for b in range(0, len(sites)) if a!=b )
#create the problme
prob=LpProblem("salesman",LpMinimize)
#indicator variable if site i is connected to site j in the tour
x = LpVariable.dicts('x',distances, 0,1,LpBinary)
#the objective
cost = lpSum([x[(i,j)]*distances[(i,j)] for (i,j) in distances])
prob+=cost
#constraints
for k in sites:
    #every site has exactly one inbound connection
    prob+= lpSum([ x[(i,k)] for i in sites if (i,k) in x]) == 1
    #every site has exactly one outbound connection
    prob+=lpSum([ x[(k,i)] for i in sites if (k,i) in x]) == 1
#we need to keep track of the order in the tour to eliminate the possibility of subtours
u = LpVariable.dicts('u', sites, 0, len(sites)-1, LpInteger)
#subtour elimination
N=len(sites)
for i in sites:
    for j in sites:
        if i != j and (i != '億載金城' and j!= '億載金城') and (i,j) in x:
            prob += u[i] - u[j] <= (N)*(1-x[(i,j)]) - 1
print(prob)
prob.solve()

print(LpStatus[prob.status])
sites_left = sites.copy()
org = '億載金城'
tour=[]
tour.append(sites_left.pop( sites_left.index(org)))

while len(sites_left) > 0:

    for k in sites_left:
        if x[(org,k)].varValue ==1:
            tour.append( sites_left.pop( sites_left.index(k)))
            org=k
            break

tour.append('億載金城')

tour_legs = [distances[(tour[i-1], tour[i])] for i in range(1,len(tour))]

print('Found optimal tour!')
print(' -> '.join(tour))
print(sum(tour_legs))

